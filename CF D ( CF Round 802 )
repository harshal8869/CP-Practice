#include <bits/stdc++.h>
using namespace std;
typedef vector<int> vi;
typedef pair<int, int> pi;
typedef vector<pi> vpi;
#define all(x) x.begin(), x.end()
#define _sorted(x) sort(all(x))
#define ll long long int
typedef vector<ll> vl;
typedef vector<vl>vvl;
const int mod = 998244353;
const int maxi = 3e5 + 10;
const ll N = 1e6+5;
char s[N];
int prime[10000005];
vector<ll>sqs;
vector<int>primes;
vector<ll>prime_factorisation(ll n){
    vector<ll> mp;
    while(n!=1){
        ll c=0;
        ll y=prime[n];
        while(n%y==0){
            n=n/y;
            c++;
        }
        mp.push_back(y);
    }
    return mp;
}
struct cmp{
	bool operator()(pair<ll,ll> a,pair<ll,ll> b){
		if(a.first<b.first){
			return 1;
		}
		else{
			if(a.first==b.first){
				if(a.second<b.second){
					return 0;
				}
				else{
					return 1;
				}
			}
			return 0;
		}
	}
};
bool isSmaller(string str1, string str2)
{
    int n1 = str1.length();
    int n2 = str2.length();
 
    if (n1 < n2)
        return true;
    if (n2 < n1)
        return false;
 
    for (int i = 0; i < n1; i++)
        if (str1[i] < str2[i])
            return true;
        else if (str1[i] > str2[i])
            return false;
 
    return false;
}


string findDiff(string str1, string str2)
{
    
    if (isSmaller(str1, str2))
        swap(str1, str2);
    string str = "";
    int n1 = str1.length();
    int n2 = str2.length();
    reverse(str1.begin(), str1.end());
    reverse(str2.begin(), str2.end());
 
    int carry = 0;
    for (int i = 0; i < n2; i++) {
        
 int sub = ((str1[i] - '0') - (str2[i] - '0') - carry);
 
        if (sub < 0){
            sub = sub + 10;
            carry = 1;
        }
        else
            carry = 0;
 
        str.push_back(sub + '0');
    }
    for (int i = n2; i < n1; i++) {
        int sub = ((str1[i] - '0') - carry);
        if (sub < 0) {
            sub = sub + 10;
            carry = 1;
        }
        else
            carry = 0;
 
        str.push_back(sub + '0');
    }
    reverse(str.begin(), str.end());
 
    return str;
}









int main()
{
       /*
       }
       else{
        cout
	int mnp[n+1];
	mxp[n] = n;
	mnp[n] = n;
	for(int i=n-1;i>0;i--){
		mxp[i] = arr[i] > arr[mxp[i+1]] ? i:mxp[i+1];
		mnp[i] = arr[i] < arr[mnp[i+1]] ? i:mnp[i+1];
	}
 

 
	for(int i=1;i<n;){
		if(arr[i+1] > arr[i]){
			int p = i+1;
			if(mnp[i]!=i){
				for(int j=i+1;j<=n && arr[j] > arr[i]; j++) 
					if(arr[j] > arr[p]){
					p=j;
					}
			}
			else{
			p=mxp[i+1];
			}
			i = p;
		}
		else{
			int p = i+1;
			if(mxp[i]!=i){
				for(int j=i+1;j<=n && arr[j] < arr[i];j++){
					if(arr[j] < arr[p]){
					p=j;
					}
				}
			}
			else{
			p=mnp[i+1];
			}
			i=p;
			
			
		}
		ans++;
	}
	cout<<ans<<endl;

	ll n, m, x1, y1, x2, y2;
	cin >> n >> m >>  x1 >> y1 >> x2 >> y2;
	string d;
	cin >> d;
	ll cnt = 0, trv = 0;
	map<pair<string, pair<ll, ll>>, ll> mp;
	while (mp[ {d, {x1, y1}}] != 2)
	{
		if (x1 == x2 && y1 == y2)
		{
			cout<<cnt<<endl;
			return;
		}
		if (d == "DR")
		{
			x1++;
			y1++;
		}
		if (d == "DL")
		{
			y1--;
			x1++;
		}
		if (d == "UL")
		{
			x1--;
			y1--;
		}
		if (d == "UR")
		{
			x1--;
			y1++;
		}
		bool ok = false;
		if (x1 == 0)
		{
			d[0] = 'D';
			x1 += 2;
			ok = true;
		}
		if (y1 == 0)
		{
			d[1] = 'R';
			y1 += 2;
			ok = true;
		}
		if (x1 == n + 1)
		{
			d[0] = 'U';
			x1 -= 2;
			ok = true;
		}
		if (y1 == m + 1)
		{
			d[1] = 'L';
			y1 -= 2;
			ok = true;
		}
		if (ok)
		  cnt++;
		trv++;
		mp[ {d, {x1, y1}}]++;
	}
	cout<<-1<<endl;
	
	ll n, m;
    cin>>n>>m;
    ll sum = 0;
    for(int i=1;i<m;i++){
        sum+=i;
    }
    for(int i=m;i<=n*m;i+=m){
        sum+=i;
    }
    cout<<sum<<endl;
    
 
 ll n;
    cin>>n;
    string s;
    cin>>s;
    string temp;
    string ans;
    for(int i=0;i<s.length();i++){
        temp.push_back('1');
        ans.push_back(char(('9'-s[i])+'0'));
    }
    temp.push_back('1');
    if(ans[0]=='0'){
        string ss = findDiff(s,temp);
        ll i=0;
        while(ss[i]=='0'){
            i++;
        }
        for(int j=i;j<ss.size();j++){
            cout<<ss[j];
        }
        cout<<endl;
    }
    else{
        cout<<ans<<endl;
    }
    
        ll n;
       cin>>n;
       ll arr[n];
       for(int i=0;i<n;i++){
        cin>>arr[i];
       }
       ll left = 0;
       ll right = 0;
       ll ans=0;
       for(int i=0;i<n-1;i++){
        int tot = arr[i+1] - arr[i];
        
        if(tot >  0)
        {
            ans+=tot;
            right -=tot;
            
        }
        if(tot < 0)
        {
            
            ans+=abs(tot);
        
        }
        
       }
      
       cout<<ans+abs(arr[n-1]+right)<<endl;
       */
         ll n;
         cin>>n;
    vector<ll> arr(n);
    ll sum = 0;
    for (ll i = 0; i < n; i++){
        cin>>arr[i];
        sum += arr[i];
    }
    
    ll min_time = 0;
    ll extra = 0;
    ll flag = 1;
    ll l = 1,r = 1e9;
 
    while(l <= r){
        extra = 0;
        ll mid = (l+r)/2;
        flag = 1;
        for (ll i = 0; i < n; i++)
        {
            extra += mid;
            if(arr[i] > extra){
                flag = 0;
                break;
            }
            extra -= arr[i];
        }
        if(flag){
            min_time = mid;
            r = mid - 1;
        }
        else 
            l = mid + 1;
    }
 
    ll q;
    cin>>q;
    while(q--){
        ll t;
        cin>>t;
        if(t < min_time)
            cout<<-1<<endl;
        else
            cout<<(sum+(t-1))/t<<endl;
    }
      
}





   
