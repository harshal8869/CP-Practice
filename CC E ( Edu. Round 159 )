// Jai Shree Ram
//Jai Hanuman Ji
//Jai Mata Di
//Har Har Mahadev
 
#include <bits/stdc++.h>
using namespace std;
#define ll long long int
const int mod = 998244353;
const int maxi = 3e5 + 10;
const int MOD =1000000007;
//int dp[500005], dpp[500005];
 
 
ll trie[26][1000005];
ll nodeValue[1000005];
ll currentNode=1;
// void jodd(int a,int b){
//     sum = sum + b;
//     for(;a<n+1;a+=a&-a)
//     dpp[a]= dpp[a] + b;
// }
void jodd(string s){
    ll currentNode = 0;  ll len = s.size();
    for(ll j=0;j<len;j++) {
        if(trie[s[j] - 'a'][currentNode]!=0){
            currentNode = trie[s[j] - 'a'][currentNode];
        }
        else{
           
             trie[s[j] - 'a'][currentNode] = ::currentNode;
            currentNode = ::currentNode++;
        }
        nodeValue[currentNode]++;
    }
}

ll lcm(ll a, ll b){
    return (a / __gcd(a, b)) * b;
}
 
ll mathpow(ll a,ll b){
     ll x = 1;
     while(b){
         if(b & 1)
             x = x * a;
             x = x % mod;
             a = a * a;
             a = a % mod;
             b >>=1;
         
     }
     return x;
 }
 
 
 
ll mod_inv(ll x){
	return mathpow(x, mod - 2);
}       
 
ll mod_mult(ll a, ll b){
    a = a % MOD;
    b = b % MOD;
    return (((a * b) % MOD) + MOD) % MOD;
}
 
ll mod_sum(ll a, ll b){
    a = a % mod;
    b = b % mod;
    return (((a + b) % mod) + mod) % mod;
}
 
ll mod_div(ll a,ll b){
	return (a % mod * mod_inv(b)) % mod;
}
vector<ll> factors(ll n){
    vector<ll> ans;
    for (ll i=2;i * i <= n;i++){
        if (n % i == 0){
            ans.push_back(i);
            if (i * i!=n){
                ans.push_back(n / i);
            }
        }
    }
    return ans;
}
 ll srch(string s){
    ll currentNode = 0, sum = 0; ll len = s.size();
    for(ll j=0;j<len;j++) {
        if(trie[s[j] - 'a'][currentNode]==0) {
            break;
        }
        else{
            currentNode = trie[s[j] - 'a'][currentNode];
        }
        sum = sum + nodeValue[currentNode];
    }
    return sum;
}
 
int isprime(int n){
   if(n<=1){
		return 0;
	}
	if(n==2){
		return 1;
	}
	if(n%2==0){
		return 0;
	}
	for(int i=3;i<=sqrt(n);i=i+2){
		if(n%i==0){
			return 0;
		}
	}
	return 1;
}
 
 
 double dhundo(int x,int y,int a,int b){ 
     double ans = sqrt((x-a)*(x-a) + (y-b)*(y-b)); 
    return ans; 
 } 
 
ll log(ll a, ll b){
    return log2(a)/log2(b);
}
 
vector<ll> get_divisors(ll n){
 vector<ll> divisors;  int i;
    for( i = 1;i*i<n;i++){
        if (n%i==0){
            divisors.push_back(i);  divisors.push_back(n / i);
        }
    }
    if(i*i==n){
    divisors.push_back(i);
    }
 
    return divisors;
}
 




void thrill() {
    ll n;  cin>>n;  ll ans=0;
    string ss[n + 1];
    for(ll i=1;i<n+1;i++){
        cin>>ss[i];
        ans = ans + ss[i].size() * (n * 2);
        jodd(ss[i]);
    }

    for(ll i=1;i<n+1;i++) {
        reverse(ss[i].begin(),ss[i].end());
        ans = ans - srch(ss[i]) - srch(ss[i]);
    }
    cout<<ans<<endl;
}

int main(){
    thrill();
   // debug();
    return 0;
}
