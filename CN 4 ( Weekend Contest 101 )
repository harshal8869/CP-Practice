

int minTime(int u,int v,vector<vector<pair<int,int>>>&adj,int k,unordered_map<int,vector<int>>&dp){ 
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq; 
    vector<int>dist(adj.size(),INT_MAX); 
    dist[u]=0; 
    pq.push({0,u}); 
    int cnt=0; 
    while(!pq.empty()){ 
    int size=pq.size(); 

    for(int i=0;i<size;i++){ 
        cnt++; 
        if(cnt>k) break; 

        int d=pq.top().first; 
        int node=pq.top().second; 

            pq.pop(); 

            for(int j=0;j<adj[node].size();j++){ 
                int neigh=adj[node][j].first; 
                int cost=adj[node][j].second; 

                if(cost+d<dist[neigh]){ 
                    dist[neigh]=cost+d; 
                    pq.push({cost+d,neigh}); 
                } 
            } 
    } 
    if(cnt>k) break; 

    } 
    dp[u]=dist; 

    return dist[v]==INT_MAX ? -1 : dist[v]; 

} 
vector<int> fromTownToTown(int n, int m, int k, int q, vector<vector<int>>& routes, vector<vector<int>>& queries) { 
    // Write Your Code Here. 
    vector<vector<pair<int,int>>>adj(n+1); 

    for(auto r:routes){ 
        adj[r[0]].push_back({r[1],r[2]}); 
    } 
    vector<int>ans; 

    vector<bool>vis(n+1,false); 
    unordered_map<int,vector<int>>dp; 
    for(auto q:queries){ 
        int u=q[0]; 
        int v=q[1]; 

        if(vis[u]){ 

            int res=dp[u][v]==INT_MAX ? -1 : dp[u][v]; 
            ans.push_back(res); 
            continue; 
        } 

        vis[u]=true; 


        int t=minTime(u,v,adj,k,dp); 
        
        ans.push_back(t); 
    } 

    return ans; 
}

